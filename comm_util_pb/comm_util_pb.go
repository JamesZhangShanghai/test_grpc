// Code generated by protoc-gen-go. DO NOT EDIT.
// source: wwwin-github.cisco.com/cloud-cmts/cmts-hm-common/telemetry/src/pb/comm_util_pb/comm_util.proto

package comm_util_pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Message contents map from following Kafka Topics to CMMgmt gRPC Request:
//  [RangingPubInitCM], [CableModemStatePub]
type ModemStateMsg struct {
	ClientName string `protobuf:"bytes,1,opt,name=client_name,json=Client Name,proto3" json:"Client Name"`
	// Cable Modem MAC Address as an IEEE 802 MAC-48, EUI-48 in following formats:
	// "01:23:45:67:89:ab", "01-23-45-67-89-ab", or "0123.4567.89ab"
	MacAddr string `protobuf:"bytes,2,opt,name=mac_addr,json=Cable Modem,proto3" json:"Cable Modem"`
	// Service Group ID [0..3]
	SvcGrp uint32 `protobuf:"varint,3,opt,name=svc_grp,json=Service Group,proto3" json:"Service Group"`
	// MAC Domain ID [0..3]
	MacDomain uint32 `protobuf:"varint,4,opt,name=mac_domain,json=MAC Domain,proto3" json:"MAC Domain"`
	// Primary Service Identifier (SID) [1..999]
	PrimSid uint32 `protobuf:"varint,5,opt,name=prim_sid,json=Prim SID,proto3" json:"Prim SID"`
	// Primary Downstream Channel Identifier [0..255]
	PrimDcid uint32 `protobuf:"varint,6,opt,name=prim_dcid,json=DS Channel,proto3" json:"DS Channel"`
	// Primary Upstream Channel Identifier [0..255]
	InitUcid uint32 `protobuf:"varint,7,opt,name=init_ucid,json=US Channel,proto3" json:"US Channel"`
	// Primary Downstream Service Flow Identifier (DSFID) [10001..10999]
	PrimDsSfid uint32 `protobuf:"varint,8,opt,name=prim_ds_sfid,json=Prim DS SFID,proto3" json:"Prim DS SFID"`
	// Primary Upstream Service Flow Identifier (USFID) [1..999]
	PrimUsSfid uint32 `protobuf:"varint,9,opt,name=prim_us_sfid,json=Prim US SFID,proto3" json:"Prim US SFID"`
	// Cable Modem MAC State [0..64] FIXME: import Mac State enum here
	MacState uint32 `protobuf:"varint,10,opt,name=mac_state,json=State,proto3" json:"State"`
	// Cable Modem's IPv4 Address
	Ipv4Addr string `protobuf:"bytes,11,opt,name=ipv4_addr,json=IP Address,proto3" json:"IP Address"`
	// Cable Modem IPv6 Addresses
	Ipv6Addr []string `protobuf:"bytes,12,rep,name=ipv6_addr,json=IPv6 Address,proto3" json:"IPv6 Address"`
	// General Bitmask
	GenBitmask uint32 `protobuf:"varint,13,opt,name=gen_bitmask,json=General Bitmask,proto3" json:"General Bitmask"`
	// MRC-Mode Cable Modem's Receive Channel Set
	RcsDcids []uint32 `protobuf:"varint,14,rep,packed,name=rcs_dcids,json=RCS DS Channels,proto3" json:"RCS DS Channels"`
	// MTC-Mode Cable Modem's Transmit Channel Set
	TcsUcids []uint32 `protobuf:"varint,15,rep,packed,name=tcs_ucids,json=TCS US Channels,proto3" json:"TCS US Channels"`
	// Cable Modem QoS Version:
	//         docsis10 (1)
	//         docsis11 (2)
	QosVer uint32 `protobuf:"varint,16,opt,name=QosVer,json=QoS Provisioned Mode,proto3" json:"QoS Provisioned Mode"`
	// Cable Modem MAC Version:
	//         docsis10 (1)
	//         docsis11 (2)
	//         docsis20 (3)
	//         docsis30 (4)
	//         docsis31 (5)
	DocVer uint32 `protobuf:"varint,17,opt,name=DocVer,json=DOCSIS MAC Version,proto3" json:"DOCSIS MAC Version"`
	// Cable Modem Operation Version
	OperVer uint32 `protobuf:"varint,18,opt,name=OperVer,json=Operational Version,proto3" json:"Operational Version"`
	// Cable Modem Creation Initiator
	CreateInitiator string `protobuf:"bytes,19,opt,name=CreateInitiator,json=Creation Initiator,proto3" json:"Creation Initiator"`
	// Cable Modem Creation Timestamp
	// Unix Time, the number of seconds elapsed since January 1, 1970 UTC
	CreateTimestamp int64 `protobuf:"varint,20,opt,name=CreateTimestamp,json=Creation Timestamp,proto3" json:"Creation Timestamp"`
	// Cable Modem Last Registration Timestamp
	// Unix Time, the number of seconds elapsed since January 1, 1970 UTC
	LastRegTimestamp int64 `protobuf:"varint,21,opt,name=LastRegTimestamp,json=Registration Timestamp,proto3" json:"Registration Timestamp"`
	// Cable Modem Connectivity States
	// DOCS-IF3-MIB.my
	//   CmtsCmRegState ::= TEXTUAL-CONVENTION
	//   DESCRIPTION
	//       "This data type defines the CM connectivity states as reported
	//      by the CMTS.
	//      The enumerated values associated with the CmtsCmRegState are:
	//
	//      'other'
	//       indicates any state not described below.
	//      'initialRanging'
	//       indicates that the CMTS has received an Initial Ranging
	//       Request message from the CM, and the ranging process is not yet
	//       complete.
	//      'rangingAutoAdjComplete'
	//       indicates that the CM has completed initial ranging and the
	//       CMTS sends  a Ranging Status of success in the RNG-RSP.
	//      'startEae'
	//       indicates that the CMTS has received an Auth Info message for
	//       EAE from the CM.
	//      'startDhcpv4'
	//       indicates that the CMTS has received a DHCPv4 DISCOVER message
	//       from the CM.
	//      'startDhcpv6'
	//       indicates that the CMTS has received a DHCPv6 Solicit message
	//       from the CM.
	//      'dhcpv4Complete'
	//       indicates that the CMTS has sent a DHCPv4 ACK message to the
	//       CM.
	//      'dhcpv6Complete'
	//       indicates that the CMTS has sent a DHCPv6 Reply message to the
	//       CM.
	//      'startConfigFileDownload'
	//       indicates that the CM has started the config file download.
	//       If the TFTP Proxy feature is not enabled, the CMTS may not
	//       report this state.
	//      'configFileDownloadComplete'
	//       indicates that the CM has completed the config file download
	//       process.  If the TFTP Proxy feature is not enabled, the CMTS
	//       is not required to report this state.
	//      'startRegistration'
	//       indicates that the CMTS has received a Registration
	//       Request (REG-REQ or REG-REQ-MP) from the CM.
	//      'registrationComplete'
	//       indicates that the CMTS has received a Registration Acknowledge
	//       (REG-ACK) with a confirmation code of okay/success.
	//      'operational'
	//       indicates that the CM has completed all necessary
	//       initialization steps and is operational.
	//      'bpiInit'
	//       indicates that the CMTS has received an Auth Info or Auth
	//       Request message as part of BPI Initialization.
	//      'forwardingDisabled'
	//       indicates that the registration process was completed, but
	//       the network access option in the received configuration
	//       file prohibits forwarding.
	//      'rfMuteAll'
	//       indicates that the CM is instructed to mute all channels
	//       in the CM-CTRL-REQ message from CMTS."
	//   SYNTAX      INTEGER {other (1),
	//                        initialRanging(2),
	//                        rangingAutoAdjComplete(4),
	//                        startEae(10),
	//                        startDhcpv4 (11),
	//                        startDhcpv6(12),
	//                        dhcpv4Complete(5),
	//                        dhcpv6Complete(13),
	//                        startConfigFileDownload(14),
	//                        configFileDownloadComplete(15),
	//                        startRegistration(16),
	//                        registrationComplete(6),
	//                        operational (8),
	//                        bpiInit(9),
	//                        forwardingDisabled(17),
	//                        rfMuteAll(18)
	//                       }
	ConnState uint32 `protobuf:"varint,22,opt,name=ConnState,json=Connectivity State,proto3" json:"Connectivity State"`
	// Operation RCP ID (5 bytes)
	RcpID []byte `protobuf:"bytes,23,opt,name=RcpID,json=RCP ID,proto3" json:"RCP ID"`
	// Network Access Disable Flag
	NetAccessDisable bool `protobuf:"varint,24,opt,name=NetAccessDisable,json=Network Access Disabled,proto3" json:"Network Access Disabled"`
	// Reinit Reason
	ReinitReason string `protobuf:"bytes,25,opt,name=ReinitReason,json=Reinit Reason,proto3" json:"Reinit Reason"`
	// Dynamic Operation Ongoing Flag (UCC, DCC, DBC, DSA, DSC, DSD, etc)
	OnGoingDynOper       string   `protobuf:"bytes,26,opt,name=OnGoingDynOper,json=On Going Dynamic Operation,proto3" json:"On Going Dynamic Operation"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ModemStateMsg) Reset()         { *m = ModemStateMsg{} }
func (m *ModemStateMsg) String() string { return proto.CompactTextString(m) }
func (*ModemStateMsg) ProtoMessage()    {}
func (*ModemStateMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_186a9a75532f8534, []int{0}
}

func (m *ModemStateMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ModemStateMsg.Unmarshal(m, b)
}
func (m *ModemStateMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ModemStateMsg.Marshal(b, m, deterministic)
}
func (m *ModemStateMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModemStateMsg.Merge(m, src)
}
func (m *ModemStateMsg) XXX_Size() int {
	return xxx_messageInfo_ModemStateMsg.Size(m)
}
func (m *ModemStateMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ModemStateMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ModemStateMsg proto.InternalMessageInfo

func (m *ModemStateMsg) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

func (m *ModemStateMsg) GetMacAddr() string {
	if m != nil {
		return m.MacAddr
	}
	return ""
}

func (m *ModemStateMsg) GetSvcGrp() uint32 {
	if m != nil {
		return m.SvcGrp
	}
	return 0
}

func (m *ModemStateMsg) GetMacDomain() uint32 {
	if m != nil {
		return m.MacDomain
	}
	return 0
}

func (m *ModemStateMsg) GetPrimSid() uint32 {
	if m != nil {
		return m.PrimSid
	}
	return 0
}

func (m *ModemStateMsg) GetPrimDcid() uint32 {
	if m != nil {
		return m.PrimDcid
	}
	return 0
}

func (m *ModemStateMsg) GetInitUcid() uint32 {
	if m != nil {
		return m.InitUcid
	}
	return 0
}

func (m *ModemStateMsg) GetPrimDsSfid() uint32 {
	if m != nil {
		return m.PrimDsSfid
	}
	return 0
}

func (m *ModemStateMsg) GetPrimUsSfid() uint32 {
	if m != nil {
		return m.PrimUsSfid
	}
	return 0
}

func (m *ModemStateMsg) GetMacState() uint32 {
	if m != nil {
		return m.MacState
	}
	return 0
}

func (m *ModemStateMsg) GetIpv4Addr() string {
	if m != nil {
		return m.Ipv4Addr
	}
	return ""
}

func (m *ModemStateMsg) GetIpv6Addr() []string {
	if m != nil {
		return m.Ipv6Addr
	}
	return nil
}

func (m *ModemStateMsg) GetGenBitmask() uint32 {
	if m != nil {
		return m.GenBitmask
	}
	return 0
}

func (m *ModemStateMsg) GetRcsDcids() []uint32 {
	if m != nil {
		return m.RcsDcids
	}
	return nil
}

func (m *ModemStateMsg) GetTcsUcids() []uint32 {
	if m != nil {
		return m.TcsUcids
	}
	return nil
}

func (m *ModemStateMsg) GetQosVer() uint32 {
	if m != nil {
		return m.QosVer
	}
	return 0
}

func (m *ModemStateMsg) GetDocVer() uint32 {
	if m != nil {
		return m.DocVer
	}
	return 0
}

func (m *ModemStateMsg) GetOperVer() uint32 {
	if m != nil {
		return m.OperVer
	}
	return 0
}

func (m *ModemStateMsg) GetCreateInitiator() string {
	if m != nil {
		return m.CreateInitiator
	}
	return ""
}

func (m *ModemStateMsg) GetCreateTimestamp() int64 {
	if m != nil {
		return m.CreateTimestamp
	}
	return 0
}

func (m *ModemStateMsg) GetLastRegTimestamp() int64 {
	if m != nil {
		return m.LastRegTimestamp
	}
	return 0
}

func (m *ModemStateMsg) GetConnState() uint32 {
	if m != nil {
		return m.ConnState
	}
	return 0
}

func (m *ModemStateMsg) GetRcpID() []byte {
	if m != nil {
		return m.RcpID
	}
	return nil
}

func (m *ModemStateMsg) GetNetAccessDisable() bool {
	if m != nil {
		return m.NetAccessDisable
	}
	return false
}

func (m *ModemStateMsg) GetReinitReason() string {
	if m != nil {
		return m.ReinitReason
	}
	return ""
}

func (m *ModemStateMsg) GetOnGoingDynOper() string {
	if m != nil {
		return m.OnGoingDynOper
	}
	return ""
}

// Message definition for ccmts docker event
type DockerEventMsg struct {
	// Event Type, normal is "container"
	Type string `protobuf:"bytes,1,opt,name=Type,json=Event Type,proto3" json:"Event Type"`
	// Event Action, may be "update", "kill", "die", etc
	Action string `protobuf:"bytes,2,opt,name=Action,json=Event Action,proto3" json:"Event Action"`
	// Name Space
	Namespace string `protobuf:"bytes,3,opt,name=Namespace,json=Name Space,proto3" json:"Name Space"`
	// Pod Name
	PodName string `protobuf:"bytes,4,opt,name=PodName,json=Pod Name,proto3" json:"Pod Name"`
	// Container Name
	ContainerName string `protobuf:"bytes,5,opt,name=ContainerName,json=Container Name,proto3" json:"Container Name"`
	// Associated container
	AssociatedContainer string `protobuf:"bytes,6,opt,name=AssociatedContainer,json=Associated container,proto3" json:"Associated container"`
	// Image Name
	Image string `protobuf:"bytes,7,opt,name=Image,json=Image Name,proto3" json:"Image Name"`
	// Image ID
	ID string `protobuf:"bytes,8,opt,name=ID,json=Image ID,proto3" json:"Image ID"`
	// Time
	TimeNano int64 `protobuf:"varint,9,opt,name=TimeNano,json=Time Nano,proto3" json:"Time Nano"`
	// Restart Count
	RestartCount uint32 `protobuf:"varint,10,opt,name=RestartCount,json=Restart Count,proto3" json:"Restart Count"`
	// Error Code
	Code uint32 `protobuf:"varint,11,opt,name=Code,json=Error Code,proto3" json:"Error Code"`
	// Error Descr
	Descr                string   `protobuf:"bytes,12,opt,name=Descr,json=Error Descr,proto3" json:"Error Descr"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DockerEventMsg) Reset()         { *m = DockerEventMsg{} }
func (m *DockerEventMsg) String() string { return proto.CompactTextString(m) }
func (*DockerEventMsg) ProtoMessage()    {}
func (*DockerEventMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_186a9a75532f8534, []int{1}
}

func (m *DockerEventMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DockerEventMsg.Unmarshal(m, b)
}
func (m *DockerEventMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DockerEventMsg.Marshal(b, m, deterministic)
}
func (m *DockerEventMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DockerEventMsg.Merge(m, src)
}
func (m *DockerEventMsg) XXX_Size() int {
	return xxx_messageInfo_DockerEventMsg.Size(m)
}
func (m *DockerEventMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_DockerEventMsg.DiscardUnknown(m)
}

var xxx_messageInfo_DockerEventMsg proto.InternalMessageInfo

func (m *DockerEventMsg) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *DockerEventMsg) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *DockerEventMsg) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DockerEventMsg) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *DockerEventMsg) GetContainerName() string {
	if m != nil {
		return m.ContainerName
	}
	return ""
}

func (m *DockerEventMsg) GetAssociatedContainer() string {
	if m != nil {
		return m.AssociatedContainer
	}
	return ""
}

func (m *DockerEventMsg) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *DockerEventMsg) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *DockerEventMsg) GetTimeNano() int64 {
	if m != nil {
		return m.TimeNano
	}
	return 0
}

func (m *DockerEventMsg) GetRestartCount() uint32 {
	if m != nil {
		return m.RestartCount
	}
	return 0
}

func (m *DockerEventMsg) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DockerEventMsg) GetDescr() string {
	if m != nil {
		return m.Descr
	}
	return ""
}

func init() {
	proto.RegisterType((*ModemStateMsg)(nil), "comm_util_pb.ModemStateMsg")
	proto.RegisterType((*DockerEventMsg)(nil), "comm_util_pb.DockerEventMsg")
}

func init() {
	proto.RegisterFile("wwwin-github.cisco.com/cloud-cmts/cmts-hm-common/telemetry/src/pb/comm_util_pb/comm_util.proto", fileDescriptor_186a9a75532f8534)
}

var fileDescriptor_186a9a75532f8534 = []byte{
	// 863 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x94, 0x61, 0x4f, 0x1b, 0x37,
	0x1c, 0xc6, 0x95, 0xa6, 0x09, 0x39, 0x93, 0x00, 0x33, 0xb4, 0x35, 0x6c, 0xed, 0x2c, 0x46, 0xa5,
	0x48, 0x13, 0x64, 0xdd, 0xa6, 0xbe, 0x67, 0x77, 0x1d, 0x3a, 0x69, 0x40, 0x7a, 0x07, 0x7d, 0xb9,
	0xc8, 0xf8, 0xfe, 0x0b, 0x16, 0x39, 0xfb, 0x64, 0x3b, 0x41, 0xf9, 0x00, 0xfb, 0x5e, 0xfb, 0x68,
	0x93, 0xff, 0x4e, 0x93, 0xa8, 0x6f, 0x90, 0xfc, 0x3c, 0x3f, 0x9b, 0xdc, 0xf3, 0xf7, 0x63, 0xf2,
	0xf7, 0xf3, 0xf3, 0xb3, 0xd2, 0xe7, 0x53, 0xe5, 0x1f, 0xe7, 0x0f, 0x17, 0x52, 0x39, 0x69, 0x2e,
	0xa4, 0xa9, 0x47, 0x72, 0x66, 0xe6, 0xd5, 0xb9, 0xac, 0xbd, 0x1b, 0x85, 0x3f, 0xe7, 0x8f, 0xf5,
	0xb9, 0x34, 0x75, 0x6d, 0xf4, 0xc8, 0xc3, 0x0c, 0x6a, 0xf0, 0x76, 0x39, 0x72, 0x56, 0x8e, 0x9a,
	0x87, 0x51, 0xd0, 0x27, 0x73, 0xaf, 0x66, 0x93, 0xed, 0xc5, 0x45, 0x63, 0x8d, 0x37, 0xb4, 0xbf,
	0xed, 0x9e, 0xfe, 0xb7, 0x43, 0x06, 0xd7, 0xa6, 0x82, 0xba, 0xf4, 0xc2, 0xc3, 0xb5, 0x9b, 0x52,
	0x4e, 0x76, 0xe5, 0x4c, 0x81, 0xf6, 0x13, 0x2d, 0x6a, 0x60, 0x2d, 0xde, 0x1a, 0x26, 0xc5, 0x6e,
	0x8a, 0x12, 0xbf, 0x11, 0x35, 0xd0, 0xb7, 0xa4, 0x57, 0x0b, 0x39, 0x11, 0x55, 0x65, 0xd9, 0x8b,
	0x95, 0x2d, 0x1e, 0x66, 0xc0, 0xf1, 0x20, 0xfa, 0x8e, 0xec, 0xb8, 0x85, 0x9c, 0x4c, 0x6d, 0xc3,
	0xda, 0xbc, 0x35, 0x1c, 0x14, 0x83, 0x12, 0xec, 0x42, 0x49, 0xe0, 0x57, 0xd6, 0xcc, 0x1b, 0xfa,
	0x8e, 0x90, 0xb0, 0xbd, 0x32, 0xb5, 0x50, 0x9a, 0xbd, 0x44, 0x84, 0x5c, 0x5f, 0xa6, 0x3c, 0x43,
	0x85, 0x9e, 0x90, 0x5e, 0x63, 0x55, 0x3d, 0x71, 0xaa, 0x62, 0x1d, 0x74, 0x7b, 0x63, 0xab, 0x6a,
	0x5e, 0xe6, 0x19, 0x7d, 0x4b, 0x12, 0xf4, 0x2a, 0xa9, 0x2a, 0xd6, 0x8d, 0x5b, 0xb3, 0x92, 0xa7,
	0x8f, 0x42, 0x6b, 0x98, 0x05, 0x5b, 0x69, 0xe5, 0x27, 0xf3, 0x60, 0xef, 0x44, 0xfb, 0x7e, 0x63,
	0x9f, 0x92, 0x7e, 0xdc, 0xed, 0x26, 0xee, 0x1f, 0x55, 0xb1, 0x1e, 0x12, 0x7d, 0x3c, 0x3d, 0x2b,
	0x79, 0xf9, 0x67, 0x9e, 0xad, 0x99, 0xf9, 0x8a, 0x49, 0xb6, 0x98, 0xfb, 0x15, 0xc3, 0x48, 0x12,
	0xbe, 0xc0, 0x85, 0xc8, 0x18, 0x41, 0xa0, 0x83, 0xf9, 0xe1, 0x0f, 0x68, 0x16, 0xbf, 0xc7, 0x6c,
	0x76, 0x31, 0x1b, 0x92, 0x8f, 0xf9, 0x65, 0x55, 0x59, 0x70, 0x8e, 0xfe, 0x88, 0xf6, 0xc7, 0x68,
	0xf7, 0x79, 0x7b, 0x98, 0x14, 0xfd, 0x7c, 0xbc, 0xf8, 0xb8, 0x06, 0xce, 0xc8, 0xee, 0x14, 0xf4,
	0xe4, 0x41, 0xf9, 0x5a, 0xb8, 0x27, 0x36, 0xc0, 0xb3, 0xf7, 0xaf, 0x40, 0x83, 0x15, 0x33, 0xfe,
	0x47, 0x94, 0xe9, 0x29, 0x49, 0xac, 0x74, 0x18, 0x82, 0x63, 0x7b, 0xbc, 0x1d, 0x98, 0x22, 0x2d,
	0xf9, 0x26, 0x09, 0x17, 0x18, 0x2f, 0x1d, 0x26, 0xe1, 0xd8, 0x7e, 0x64, 0xee, 0xd2, 0x92, 0xdf,
	0x6f, 0x31, 0x67, 0xa4, 0xfb, 0xd9, 0xb8, 0x2f, 0x60, 0xd9, 0x01, 0xfe, 0xa3, 0xa3, 0xcf, 0xa6,
	0xe4, 0x63, 0x6b, 0x16, 0xca, 0x29, 0xa3, 0xa1, 0xc2, 0x81, 0xd2, 0x53, 0xd2, 0xcd, 0x8c, 0x0c,
	0xd4, 0x77, 0x48, 0xd1, 0xec, 0x36, 0x2d, 0xf3, 0x92, 0x87, 0x91, 0x7d, 0x01, 0x1b, 0x50, 0x7a,
	0x46, 0x76, 0x6e, 0x1b, 0xb0, 0x01, 0xa2, 0x08, 0x1d, 0x86, 0xa5, 0xf0, 0xca, 0x68, 0x31, 0x5b,
	0x53, 0x3f, 0x93, 0xfd, 0xd4, 0x82, 0xf0, 0x90, 0x6b, 0xe5, 0x95, 0xf0, 0xc6, 0xb2, 0x43, 0xcc,
	0x88, 0xa2, 0xac, 0x8c, 0xe6, 0x6b, 0x67, 0x03, 0xdf, 0xa9, 0x1a, 0x9c, 0x17, 0x75, 0xc3, 0x8e,
	0x78, 0x6b, 0xd8, 0xde, 0x82, 0xd7, 0x0e, 0xfd, 0x85, 0x1c, 0xfc, 0x25, 0x9c, 0x2f, 0x60, 0xba,
	0xa1, 0x5f, 0x21, 0xfd, 0xba, 0x80, 0xa9, 0x72, 0xde, 0x7e, 0xbb, 0xe3, 0x3d, 0x49, 0x52, 0xa3,
	0x35, 0x8e, 0x8d, 0xbd, 0x8e, 0x1f, 0x16, 0x04, 0x90, 0x5e, 0x2d, 0x94, 0x5f, 0xf2, 0x38, 0xd0,
	0x57, 0xa4, 0x53, 0xc8, 0x26, 0xcf, 0xd8, 0x1b, 0xde, 0x1a, 0xf6, 0x8b, 0x6e, 0x91, 0x8e, 0x79,
	0x9e, 0xd1, 0x0f, 0xe4, 0xe0, 0x06, 0xfc, 0xa5, 0x94, 0xe0, 0x5c, 0xa6, 0x5c, 0xb8, 0xfd, 0x8c,
	0xf1, 0xd6, 0xb0, 0x57, 0xbc, 0xb9, 0x01, 0xff, 0x6c, 0xec, 0x13, 0x8f, 0x26, 0x5f, 0xb9, 0x15,
	0xfd, 0x89, 0xf4, 0x0b, 0x08, 0xb7, 0xb3, 0x00, 0xe1, 0x8c, 0x66, 0xc7, 0xf8, 0xe5, 0x83, 0xa8,
	0xf1, 0x28, 0xd2, 0x5f, 0xc9, 0xde, 0xad, 0xbe, 0x32, 0x4a, 0x4f, 0xb3, 0xa5, 0x0e, 0x11, 0xb2,
	0x13, 0xc4, 0x4e, 0x6e, 0x35, 0x47, 0x99, 0x67, 0x4b, 0x2d, 0x6a, 0x25, 0xf9, 0x3a, 0xdf, 0xd3,
	0x7f, 0xdb, 0x64, 0x2f, 0x33, 0xf2, 0x09, 0xec, 0xa7, 0x05, 0x68, 0x1f, 0x3a, 0xcc, 0xc8, 0xcb,
	0xbb, 0x65, 0xf3, 0xb5, 0xbc, 0x04, 0x75, 0x1e, 0x14, 0xfa, 0x03, 0xe9, 0x5e, 0xca, 0xb0, 0x6d,
	0xd5, 0xdc, 0x7e, 0xf4, 0xa2, 0x16, 0xae, 0x6f, 0x68, 0xb8, 0x6b, 0x84, 0x04, 0x2c, 0x6f, 0x52,
	0x90, 0x20, 0xf0, 0x32, 0x28, 0xf4, 0x98, 0xec, 0x8c, 0x4d, 0x15, 0x04, 0xac, 0x6d, 0x52, 0xf4,
	0xc6, 0xa6, 0x8a, 0x6f, 0xc2, 0x7b, 0x32, 0x48, 0x8d, 0xf6, 0x42, 0x69, 0xb0, 0x08, 0x74, 0x10,
	0xd8, 0x5b, 0x8b, 0x11, 0xfb, 0x40, 0x0e, 0x2f, 0x9d, 0x33, 0x52, 0x09, 0x0f, 0xd5, 0xda, 0xc3,
	0x26, 0x27, 0xc5, 0xd1, 0xc6, 0xe2, 0xf2, 0xab, 0x47, 0x8f, 0x49, 0x27, 0xaf, 0xc5, 0x14, 0xb0,
	0xcf, 0xa1, 0x4e, 0x61, 0x11, 0x4f, 0x3b, 0x22, 0x2f, 0xf2, 0x0c, 0x5b, 0x9c, 0x14, 0xbd, 0xa8,
	0xe7, 0x19, 0xfd, 0x9e, 0xf4, 0xc2, 0x98, 0x6f, 0x84, 0x36, 0xd8, 0xde, 0x76, 0x91, 0x84, 0x35,
	0x0f, 0x42, 0x9c, 0x82, 0xf3, 0xc2, 0xfa, 0xd4, 0xcc, 0xb5, 0x5f, 0xb5, 0x77, 0xb0, 0xd2, 0x38,
	0x8a, 0x21, 0xbe, 0xd4, 0x54, 0x80, 0x05, 0x1e, 0x14, 0xe4, 0x93, 0xb5, 0xc6, 0xf2, 0xa0, 0xd0,
	0x13, 0xd2, 0xc9, 0xc0, 0xc9, 0x50, 0x5e, 0x7c, 0xf7, 0xa2, 0x85, 0xd2, 0x43, 0x17, 0xdf, 0xd7,
	0xdf, 0xfe, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x38, 0xe7, 0x82, 0x8a, 0xc1, 0x05, 0x00, 0x00,
}
