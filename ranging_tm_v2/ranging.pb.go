// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ranging.proto

/*
Package ranging_tm_v2 is a generated protocol buffer package.

It is generated from these files:
	ranging.proto

It has these top-level messages:
	Ranging_Tm
	Ranging_Cm_Stats
	Ranging_Cm_Stats_List
	Ranging_Md_Stats
	Ranging_Md_Stats_List
*/
package ranging_tm_v2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Ranging_Tm struct {
	TimingAdjust    int32  `protobuf:"varint,1,opt,name=Timing_adjust,json=timingAdjust" json:"Timing_adjust,omitempty"`
	PowerAdjust     int32  `protobuf:"varint,2,opt,name=Power_adjust,json=powerAdjust" json:"Power_adjust,omitempty"`
	FrequencyAdjust int32  `protobuf:"varint,3,opt,name=Frequency_adjust,json=frequencyAdjust" json:"Frequency_adjust,omitempty"`
	SgId            uint32 `protobuf:"varint,4,opt,name=Sg_id,json=sgId" json:"Sg_id,omitempty"`
	MdId            uint32 `protobuf:"varint,5,opt,name=Md_id,json=mdId" json:"Md_id,omitempty"`
	UcId            uint32 `protobuf:"varint,6,opt,name=Uc_id,json=ucId" json:"Uc_id,omitempty"`
	CmMac           string `protobuf:"bytes,7,opt,name=Cm_mac,json=cmMac" json:"Cm_mac,omitempty"`
}

func (m *Ranging_Tm) Reset()                    { *m = Ranging_Tm{} }
func (m *Ranging_Tm) String() string            { return proto.CompactTextString(m) }
func (*Ranging_Tm) ProtoMessage()               {}
func (*Ranging_Tm) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Ranging_Tm) GetTimingAdjust() int32 {
	if m != nil {
		return m.TimingAdjust
	}
	return 0
}

func (m *Ranging_Tm) GetPowerAdjust() int32 {
	if m != nil {
		return m.PowerAdjust
	}
	return 0
}

func (m *Ranging_Tm) GetFrequencyAdjust() int32 {
	if m != nil {
		return m.FrequencyAdjust
	}
	return 0
}

func (m *Ranging_Tm) GetSgId() uint32 {
	if m != nil {
		return m.SgId
	}
	return 0
}

func (m *Ranging_Tm) GetMdId() uint32 {
	if m != nil {
		return m.MdId
	}
	return 0
}

func (m *Ranging_Tm) GetUcId() uint32 {
	if m != nil {
		return m.UcId
	}
	return 0
}

func (m *Ranging_Tm) GetCmMac() string {
	if m != nil {
		return m.CmMac
	}
	return ""
}

type Ranging_Cm_Stats struct {
	SgId                 uint32                                 `protobuf:"varint,1,opt,name=Sg_id,json=sgId" json:"Sg_id,omitempty"`
	MdId                 uint32                                 `protobuf:"varint,2,opt,name=Md_id,json=mdId" json:"Md_id,omitempty"`
	CmMac                string                                 `protobuf:"bytes,3,opt,name=Cm_mac,json=cmMac" json:"Cm_mac,omitempty"`
	MinPwrLoad           uint32                                 `protobuf:"varint,4,opt,name=Min_pwr_load,json=minPwrLoad" json:"Min_pwr_load,omitempty"`
	CmtxStats            []*Ranging_Cm_Stats_Ranging_Cmtx_Stats `protobuf:"bytes,5,rep,name=Cmtx_stats,json=cmtxStats" json:"Cmtx_stats,omitempty"`
	SmExhaustedCount     uint32                                 `protobuf:"varint,6,opt,name=Sm_exhausted_count,json=smExhaustedCount" json:"Sm_exhausted_count,omitempty"`
	CmdpwrPwrMax         uint32                                 `protobuf:"varint,7,opt,name=Cmdpwr_pwr_max,json=cmdpwrPwrMax" json:"Cmdpwr_pwr_max,omitempty"`
	CmdpwrPwrHi          uint32                                 `protobuf:"varint,8,opt,name=Cmdpwr_pwr_hi,json=cmdpwrPwrHi" json:"Cmdpwr_pwr_hi,omitempty"`
	CmdpwrNeq            uint32                                 `protobuf:"varint,9,opt,name=Cmdpwr_neq,json=cmdpwrNeq" json:"Cmdpwr_neq,omitempty"`
	CmdpwrLoadMinSet     uint32                                 `protobuf:"varint,10,opt,name=Cmdpwr_load_min_set,json=cmdpwrLoadMinSet" json:"Cmdpwr_load_min_set,omitempty"`
	CmdpwrMinDrw         uint32                                 `protobuf:"varint,11,opt,name=Cmdpwr_min_drw,json=cmdpwrMinDrw" json:"Cmdpwr_min_drw,omitempty"`
	CmdpwrMaxDrw         uint32                                 `protobuf:"varint,12,opt,name=Cmdpwr_max_drw,json=cmdpwrMaxDrw" json:"Cmdpwr_max_drw,omitempty"`
	CmdpwrPwrMaxNorm     uint32                                 `protobuf:"varint,13,opt,name=Cmdpwr_pwr_max_norm,json=cmdpwrPwrMaxNorm" json:"Cmdpwr_pwr_max_norm,omitempty"`
	CmdpwrPwrHiNorm      uint32                                 `protobuf:"varint,14,opt,name=Cmdpwr_pwr_hi_norm,json=cmdpwrPwrHiNorm" json:"Cmdpwr_pwr_hi_norm,omitempty"`
	CmdpwrLoadMinSetNorm uint32                                 `protobuf:"varint,15,opt,name=Cmdpwr_load_min_set_norm,json=cmdpwrLoadMinSetNorm" json:"Cmdpwr_load_min_set_norm,omitempty"`
	CmdpwrMinDrwNorm     uint32                                 `protobuf:"varint,16,opt,name=Cmdpwr_min_drw_norm,json=cmdpwrMinDrwNorm" json:"Cmdpwr_min_drw_norm,omitempty"`
	CmdpwrMaxDrwNorm     uint32                                 `protobuf:"varint,17,opt,name=Cmdpwr_max_drw_norm,json=cmdpwrMaxDrwNorm" json:"Cmdpwr_max_drw_norm,omitempty"`
}

func (m *Ranging_Cm_Stats) Reset()                    { *m = Ranging_Cm_Stats{} }
func (m *Ranging_Cm_Stats) String() string            { return proto.CompactTextString(m) }
func (*Ranging_Cm_Stats) ProtoMessage()               {}
func (*Ranging_Cm_Stats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Ranging_Cm_Stats) GetSgId() uint32 {
	if m != nil {
		return m.SgId
	}
	return 0
}

func (m *Ranging_Cm_Stats) GetMdId() uint32 {
	if m != nil {
		return m.MdId
	}
	return 0
}

func (m *Ranging_Cm_Stats) GetCmMac() string {
	if m != nil {
		return m.CmMac
	}
	return ""
}

func (m *Ranging_Cm_Stats) GetMinPwrLoad() uint32 {
	if m != nil {
		return m.MinPwrLoad
	}
	return 0
}

func (m *Ranging_Cm_Stats) GetCmtxStats() []*Ranging_Cm_Stats_Ranging_Cmtx_Stats {
	if m != nil {
		return m.CmtxStats
	}
	return nil
}

func (m *Ranging_Cm_Stats) GetSmExhaustedCount() uint32 {
	if m != nil {
		return m.SmExhaustedCount
	}
	return 0
}

func (m *Ranging_Cm_Stats) GetCmdpwrPwrMax() uint32 {
	if m != nil {
		return m.CmdpwrPwrMax
	}
	return 0
}

func (m *Ranging_Cm_Stats) GetCmdpwrPwrHi() uint32 {
	if m != nil {
		return m.CmdpwrPwrHi
	}
	return 0
}

func (m *Ranging_Cm_Stats) GetCmdpwrNeq() uint32 {
	if m != nil {
		return m.CmdpwrNeq
	}
	return 0
}

func (m *Ranging_Cm_Stats) GetCmdpwrLoadMinSet() uint32 {
	if m != nil {
		return m.CmdpwrLoadMinSet
	}
	return 0
}

func (m *Ranging_Cm_Stats) GetCmdpwrMinDrw() uint32 {
	if m != nil {
		return m.CmdpwrMinDrw
	}
	return 0
}

func (m *Ranging_Cm_Stats) GetCmdpwrMaxDrw() uint32 {
	if m != nil {
		return m.CmdpwrMaxDrw
	}
	return 0
}

func (m *Ranging_Cm_Stats) GetCmdpwrPwrMaxNorm() uint32 {
	if m != nil {
		return m.CmdpwrPwrMaxNorm
	}
	return 0
}

func (m *Ranging_Cm_Stats) GetCmdpwrPwrHiNorm() uint32 {
	if m != nil {
		return m.CmdpwrPwrHiNorm
	}
	return 0
}

func (m *Ranging_Cm_Stats) GetCmdpwrLoadMinSetNorm() uint32 {
	if m != nil {
		return m.CmdpwrLoadMinSetNorm
	}
	return 0
}

func (m *Ranging_Cm_Stats) GetCmdpwrMinDrwNorm() uint32 {
	if m != nil {
		return m.CmdpwrMinDrwNorm
	}
	return 0
}

func (m *Ranging_Cm_Stats) GetCmdpwrMaxDrwNorm() uint32 {
	if m != nil {
		return m.CmdpwrMaxDrwNorm
	}
	return 0
}

type Ranging_Cm_Stats_Ranging_Cmtx_Stats struct {
	UcId                 uint32 `protobuf:"varint,1,opt,name=Uc_id,json=ucId" json:"Uc_id,omitempty"`
	RngState             string `protobuf:"bytes,2,opt,name=Rng_state,json=rngState" json:"Rng_state,omitempty"`
	Snr                  uint32 `protobuf:"varint,3,opt,name=Snr,json=snr" json:"Snr,omitempty"`
	DataMer              uint32 `protobuf:"varint,4,opt,name=Data_mer,json=dataMer" json:"Data_mer,omitempty"`
	RxPower              int32  `protobuf:"varint,5,opt,name=Rx_power,json=rxPower" json:"Rx_power,omitempty"`
	PwrReportLevel       uint32 `protobuf:"varint,6,opt,name=Pwr_report_level,json=pwrReportLevel" json:"Pwr_report_level,omitempty"`
	PwrPeakLevel         uint32 `protobuf:"varint,7,opt,name=Pwr_peak_level,json=pwrPeakLevel" json:"Pwr_peak_level,omitempty"`
	PhyPeakLevel         uint32 `protobuf:"varint,8,opt,name=Phy_peak_level,json=phyPeakLevel" json:"Phy_peak_level,omitempty"`
	DynPwrMax            uint32 `protobuf:"varint,9,opt,name=Dyn_pwr_max,json=dynPwrMax" json:"Dyn_pwr_max,omitempty"`
	DynPwrMin            uint32 `protobuf:"varint,10,opt,name=Dyn_pwr_min,json=dynPwrMin" json:"Dyn_pwr_min,omitempty"`
	PwrMinLevel          uint32 `protobuf:"varint,11,opt,name=Pwr_min_level,json=pwrMinLevel" json:"Pwr_min_level,omitempty"`
	PwrLoad              uint32 `protobuf:"varint,12,opt,name=Pwr_load,json=pwrLoad" json:"Pwr_load,omitempty"`
	TimingOffset         int32  `protobuf:"varint,13,opt,name=Timing_offset,json=timingOffset" json:"Timing_offset,omitempty"`
	InitTimingOffset     int32  `protobuf:"varint,14,opt,name=Init_timing_offset,json=initTimingOffset" json:"Init_timing_offset,omitempty"`
	TimingAdjustRawAvg   int32  `protobuf:"varint,15,opt,name=Timing_adjust_raw_avg,json=timingAdjustRawAvg" json:"Timing_adjust_raw_avg,omitempty"`
	TimingAdjustRawLtAvg int32  `protobuf:"varint,16,opt,name=Timing_adjust_raw_lt_avg,json=timingAdjustRawLtAvg" json:"Timing_adjust_raw_lt_avg,omitempty"`
	TimingAdjustRawMin   int32  `protobuf:"varint,17,opt,name=Timing_adjust_raw_min,json=timingAdjustRawMin" json:"Timing_adjust_raw_min,omitempty"`
	TimingAdjustRawMax   int32  `protobuf:"varint,18,opt,name=Timing_adjust_raw_max,json=timingAdjustRawMax" json:"Timing_adjust_raw_max,omitempty"`
	GoodCoefCnt          uint32 `protobuf:"varint,19,opt,name=Good_coef_cnt,json=goodCoefCnt" json:"Good_coef_cnt,omitempty"`
	ScaleCoefCnt         uint32 `protobuf:"varint,20,opt,name=Scale_coef_cnt,json=scaleCoefCnt" json:"Scale_coef_cnt,omitempty"`
	ImpulseCoefCnt       uint32 `protobuf:"varint,21,opt,name=Impulse_coef_cnt,json=impulseCoefCnt" json:"Impulse_coef_cnt,omitempty"`
	PreEquCoeffLoadCnt   uint32 `protobuf:"varint,22,opt,name=Pre_equ_coeff_load_cnt,json=preEquCoeffLoadCnt" json:"Pre_equ_coeff_load_cnt,omitempty"`
	PhyOpMode            uint32 `protobuf:"varint,23,opt,name=Phy_op_mode,json=phyOpMode" json:"Phy_op_mode,omitempty"`
	InitRngInterval      uint32 `protobuf:"varint,24,opt,name=Init_rng_interval,json=initRngInterval" json:"Init_rng_interval,omitempty"`
	HitCount             uint32 `protobuf:"varint,25,opt,name=Hit_count,json=hitCount" json:"Hit_count,omitempty"`
	MisCount             uint32 `protobuf:"varint,26,opt,name=Mis_count,json=misCount" json:"Mis_count,omitempty"`
	ConMisCount          uint32 `protobuf:"varint,27,opt,name=Con_mis_count,json=conMisCount" json:"Con_mis_count,omitempty"`
	PowerAdj             int32  `protobuf:"varint,28,opt,name=Power_adj,json=powerAdj" json:"Power_adj,omitempty"`
	CmdpwrRepPwr         uint32 `protobuf:"varint,29,opt,name=Cmdpwr_rep_pwr,json=cmdpwrRepPwr" json:"Cmdpwr_rep_pwr,omitempty"`
	CmdpwrCmdPwr         uint32 `protobuf:"varint,30,opt,name=Cmdpwr_cmd_pwr,json=cmdpwrCmdPwr" json:"Cmdpwr_cmd_pwr,omitempty"`
	CmdpwrPwrLow         uint32 `protobuf:"varint,31,opt,name=Cmdpwr_pwr_low,json=cmdpwrPwrLow" json:"Cmdpwr_pwr_low,omitempty"`
	CmdpwrPwrLoad        uint32 `protobuf:"varint,32,opt,name=Cmdpwr_pwr_load,json=cmdpwrPwrLoad" json:"Cmdpwr_pwr_load,omitempty"`
	CmdpwrRepPwrNorm     uint32 `protobuf:"varint,33,opt,name=Cmdpwr_rep_pwr_norm,json=cmdpwrRepPwrNorm" json:"Cmdpwr_rep_pwr_norm,omitempty"`
	CmdpwrCmdPwrNorm     uint32 `protobuf:"varint,34,opt,name=Cmdpwr_cmd_pwr_norm,json=cmdpwrCmdPwrNorm" json:"Cmdpwr_cmd_pwr_norm,omitempty"`
	CmdpwrPwrLowNorm     uint32 `protobuf:"varint,35,opt,name=Cmdpwr_pwr_low_norm,json=cmdpwrPwrLowNorm" json:"Cmdpwr_pwr_low_norm,omitempty"`
	CmdpwrPwrLoadNorm    uint32 `protobuf:"varint,36,opt,name=Cmdpwr_pwr_load_norm,json=cmdpwrPwrLoadNorm" json:"Cmdpwr_pwr_load_norm,omitempty"`
	ReserveForV2Cnbr     string `protobuf:"bytes,37,opt,name=Reserve_for_v2_cnbr,json=reserveForV2Cnbr" json:"Reserve_for_v2_cnbr,omitempty"`
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) Reset()         { *m = Ranging_Cm_Stats_Ranging_Cmtx_Stats{} }
func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) String() string { return proto.CompactTextString(m) }
func (*Ranging_Cm_Stats_Ranging_Cmtx_Stats) ProtoMessage()    {}
func (*Ranging_Cm_Stats_Ranging_Cmtx_Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 0}
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetUcId() uint32 {
	if m != nil {
		return m.UcId
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetRngState() string {
	if m != nil {
		return m.RngState
	}
	return ""
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetSnr() uint32 {
	if m != nil {
		return m.Snr
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetDataMer() uint32 {
	if m != nil {
		return m.DataMer
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetRxPower() int32 {
	if m != nil {
		return m.RxPower
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetPwrReportLevel() uint32 {
	if m != nil {
		return m.PwrReportLevel
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetPwrPeakLevel() uint32 {
	if m != nil {
		return m.PwrPeakLevel
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetPhyPeakLevel() uint32 {
	if m != nil {
		return m.PhyPeakLevel
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetDynPwrMax() uint32 {
	if m != nil {
		return m.DynPwrMax
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetDynPwrMin() uint32 {
	if m != nil {
		return m.DynPwrMin
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetPwrMinLevel() uint32 {
	if m != nil {
		return m.PwrMinLevel
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetPwrLoad() uint32 {
	if m != nil {
		return m.PwrLoad
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetTimingOffset() int32 {
	if m != nil {
		return m.TimingOffset
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetInitTimingOffset() int32 {
	if m != nil {
		return m.InitTimingOffset
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetTimingAdjustRawAvg() int32 {
	if m != nil {
		return m.TimingAdjustRawAvg
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetTimingAdjustRawLtAvg() int32 {
	if m != nil {
		return m.TimingAdjustRawLtAvg
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetTimingAdjustRawMin() int32 {
	if m != nil {
		return m.TimingAdjustRawMin
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetTimingAdjustRawMax() int32 {
	if m != nil {
		return m.TimingAdjustRawMax
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetGoodCoefCnt() uint32 {
	if m != nil {
		return m.GoodCoefCnt
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetScaleCoefCnt() uint32 {
	if m != nil {
		return m.ScaleCoefCnt
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetImpulseCoefCnt() uint32 {
	if m != nil {
		return m.ImpulseCoefCnt
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetPreEquCoeffLoadCnt() uint32 {
	if m != nil {
		return m.PreEquCoeffLoadCnt
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetPhyOpMode() uint32 {
	if m != nil {
		return m.PhyOpMode
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetInitRngInterval() uint32 {
	if m != nil {
		return m.InitRngInterval
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetHitCount() uint32 {
	if m != nil {
		return m.HitCount
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetMisCount() uint32 {
	if m != nil {
		return m.MisCount
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetConMisCount() uint32 {
	if m != nil {
		return m.ConMisCount
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetPowerAdj() int32 {
	if m != nil {
		return m.PowerAdj
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetCmdpwrRepPwr() uint32 {
	if m != nil {
		return m.CmdpwrRepPwr
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetCmdpwrCmdPwr() uint32 {
	if m != nil {
		return m.CmdpwrCmdPwr
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetCmdpwrPwrLow() uint32 {
	if m != nil {
		return m.CmdpwrPwrLow
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetCmdpwrPwrLoad() uint32 {
	if m != nil {
		return m.CmdpwrPwrLoad
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetCmdpwrRepPwrNorm() uint32 {
	if m != nil {
		return m.CmdpwrRepPwrNorm
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetCmdpwrCmdPwrNorm() uint32 {
	if m != nil {
		return m.CmdpwrCmdPwrNorm
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetCmdpwrPwrLowNorm() uint32 {
	if m != nil {
		return m.CmdpwrPwrLowNorm
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetCmdpwrPwrLoadNorm() uint32 {
	if m != nil {
		return m.CmdpwrPwrLoadNorm
	}
	return 0
}

func (m *Ranging_Cm_Stats_Ranging_Cmtx_Stats) GetReserveForV2Cnbr() string {
	if m != nil {
		return m.ReserveForV2Cnbr
	}
	return ""
}

type Ranging_Cm_Stats_List struct {
	CmStats []*Ranging_Cm_Stats `protobuf:"bytes,1,rep,name=Cm_stats,json=cmStats" json:"Cm_stats,omitempty"`
}

func (m *Ranging_Cm_Stats_List) Reset()                    { *m = Ranging_Cm_Stats_List{} }
func (m *Ranging_Cm_Stats_List) String() string            { return proto.CompactTextString(m) }
func (*Ranging_Cm_Stats_List) ProtoMessage()               {}
func (*Ranging_Cm_Stats_List) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Ranging_Cm_Stats_List) GetCmStats() []*Ranging_Cm_Stats {
	if m != nil {
		return m.CmStats
	}
	return nil
}

type Ranging_Md_Stats struct {
	SgId           uint32 `protobuf:"varint,1,opt,name=Sg_id,json=sgId" json:"Sg_id,omitempty"`
	MdId           uint32 `protobuf:"varint,2,opt,name=Md_id,json=mdId" json:"Md_id,omitempty"`
	TotalRngReqs   uint32 `protobuf:"varint,3,opt,name=Total_rng_reqs,json=totalRngReqs" json:"Total_rng_reqs,omitempty"`
	RngReqs        uint32 `protobuf:"varint,4,opt,name=Rng_reqs,json=rngReqs" json:"Rng_reqs,omitempty"`
	InitRngReqs    uint32 `protobuf:"varint,5,opt,name=Init_rng_reqs,json=initRngReqs" json:"Init_rng_reqs,omitempty"`
	BInitRngReqs   uint32 `protobuf:"varint,6,opt,name=BInit_rng_reqs,json=bInitRngReqs" json:"BInit_rng_reqs,omitempty"`
	InvalidRngReqs uint32 `protobuf:"varint,7,opt,name=Invalid_rng_reqs,json=invalidRngReqs" json:"Invalid_rng_reqs,omitempty"`
	RngAborts      uint32 `protobuf:"varint,8,opt,name=Rng_aborts,json=rngAborts" json:"Rng_aborts,omitempty"`
	RngErrors      uint32 `protobuf:"varint,9,opt,name=Rng_errors,json=rngErrors" json:"Rng_errors,omitempty"`
}

func (m *Ranging_Md_Stats) Reset()                    { *m = Ranging_Md_Stats{} }
func (m *Ranging_Md_Stats) String() string            { return proto.CompactTextString(m) }
func (*Ranging_Md_Stats) ProtoMessage()               {}
func (*Ranging_Md_Stats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Ranging_Md_Stats) GetSgId() uint32 {
	if m != nil {
		return m.SgId
	}
	return 0
}

func (m *Ranging_Md_Stats) GetMdId() uint32 {
	if m != nil {
		return m.MdId
	}
	return 0
}

func (m *Ranging_Md_Stats) GetTotalRngReqs() uint32 {
	if m != nil {
		return m.TotalRngReqs
	}
	return 0
}

func (m *Ranging_Md_Stats) GetRngReqs() uint32 {
	if m != nil {
		return m.RngReqs
	}
	return 0
}

func (m *Ranging_Md_Stats) GetInitRngReqs() uint32 {
	if m != nil {
		return m.InitRngReqs
	}
	return 0
}

func (m *Ranging_Md_Stats) GetBInitRngReqs() uint32 {
	if m != nil {
		return m.BInitRngReqs
	}
	return 0
}

func (m *Ranging_Md_Stats) GetInvalidRngReqs() uint32 {
	if m != nil {
		return m.InvalidRngReqs
	}
	return 0
}

func (m *Ranging_Md_Stats) GetRngAborts() uint32 {
	if m != nil {
		return m.RngAborts
	}
	return 0
}

func (m *Ranging_Md_Stats) GetRngErrors() uint32 {
	if m != nil {
		return m.RngErrors
	}
	return 0
}

type Ranging_Md_Stats_List struct {
	MdStats []*Ranging_Md_Stats `protobuf:"bytes,1,rep,name=Md_stats,json=mdStats" json:"Md_stats,omitempty"`
}

func (m *Ranging_Md_Stats_List) Reset()                    { *m = Ranging_Md_Stats_List{} }
func (m *Ranging_Md_Stats_List) String() string            { return proto.CompactTextString(m) }
func (*Ranging_Md_Stats_List) ProtoMessage()               {}
func (*Ranging_Md_Stats_List) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Ranging_Md_Stats_List) GetMdStats() []*Ranging_Md_Stats {
	if m != nil {
		return m.MdStats
	}
	return nil
}

func init() {
	proto.RegisterType((*Ranging_Tm)(nil), "ranging_tm_v2.Ranging_Tm")
	proto.RegisterType((*Ranging_Cm_Stats)(nil), "ranging_tm_v2.Ranging_Cm_Stats")
	proto.RegisterType((*Ranging_Cm_Stats_Ranging_Cmtx_Stats)(nil), "ranging_tm_v2.Ranging_Cm_Stats.Ranging_Cmtx_Stats")
	proto.RegisterType((*Ranging_Cm_Stats_List)(nil), "ranging_tm_v2.Ranging_Cm_Stats_List")
	proto.RegisterType((*Ranging_Md_Stats)(nil), "ranging_tm_v2.Ranging_Md_Stats")
	proto.RegisterType((*Ranging_Md_Stats_List)(nil), "ranging_tm_v2.Ranging_Md_Stats_List")
}

func init() { proto.RegisterFile("ranging.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x96, 0xdd, 0x72, 0xe2, 0x36,
	0x14, 0xc7, 0x87, 0x64, 0x09, 0x20, 0x3e, 0x42, 0x9c, 0x64, 0xeb, 0x6c, 0x9a, 0x2c, 0xcb, 0xa6,
	0x1d, 0xfa, 0x95, 0x4e, 0xe9, 0x4c, 0x2f, 0x7a, 0x97, 0x92, 0x6c, 0x97, 0x19, 0xbc, 0x4b, 0x4d,
	0xda, 0x5b, 0x8d, 0x62, 0x0b, 0xe3, 0x2e, 0x92, 0x8c, 0x2c, 0x30, 0x3c, 0x4c, 0x9f, 0xa1, 0x4f,
	0xd3, 0xb7, 0xe8, 0x43, 0x74, 0xf4, 0x61, 0x10, 0x2c, 0x33, 0x6d, 0x2f, 0x32, 0x13, 0xfe, 0xe7,
	0x77, 0xac, 0x23, 0xe9, 0xe8, 0x2f, 0x81, 0x3a, 0x47, 0x34, 0x8a, 0x69, 0x74, 0x9b, 0x70, 0x26,
	0x98, 0x93, 0xff, 0x84, 0x82, 0xc0, 0x45, 0xb7, 0xfd, 0x57, 0x01, 0x00, 0xdf, 0x28, 0x8f, 0xc4,
	0x79, 0x0d, 0xea, 0x8f, 0x31, 0x91, 0x3f, 0x50, 0xf8, 0xfb, 0x3c, 0x15, 0x6e, 0xa1, 0x55, 0xe8,
	0x14, 0xfd, 0x9a, 0x50, 0xe2, 0x9d, 0xd2, 0x9c, 0x57, 0xa0, 0x36, 0x64, 0x19, 0xe6, 0x39, 0x73,
	0xa0, 0x98, 0x6a, 0x22, 0x35, 0x83, 0x7c, 0x01, 0x9a, 0x6f, 0x38, 0x9e, 0xcd, 0x31, 0x0d, 0x56,
	0x39, 0x76, 0xa8, 0xb0, 0xe3, 0x71, 0xae, 0x1b, 0xf4, 0x14, 0x14, 0x47, 0x11, 0x8c, 0x43, 0xf7,
	0x59, 0xab, 0xd0, 0xa9, 0xfb, 0xcf, 0xd2, 0xa8, 0x1f, 0x4a, 0xd1, 0x0b, 0xa5, 0x58, 0xd4, 0x22,
	0x09, 0xb5, 0xf8, 0x6b, 0x20, 0xc5, 0x23, 0x2d, 0xce, 0x83, 0x7e, 0xe8, 0x9c, 0x83, 0xa3, 0x1e,
	0x81, 0x04, 0x05, 0x6e, 0xa9, 0x55, 0xe8, 0x54, 0xfc, 0x62, 0x40, 0x3c, 0x14, 0xb4, 0xff, 0x6e,
	0x82, 0x66, 0x3e, 0xaf, 0x1e, 0x81, 0x23, 0x81, 0x44, 0xba, 0x19, 0xaa, 0xb0, 0x6f, 0xa8, 0x03,
	0x6b, 0xa8, 0xcd, 0x57, 0x0f, 0xad, 0xaf, 0x3a, 0x2d, 0x50, 0xf3, 0x62, 0x0a, 0x93, 0x8c, 0xc3,
	0x29, 0x43, 0x79, 0xc9, 0x80, 0xc4, 0x74, 0x98, 0xf1, 0x01, 0x43, 0xa1, 0xf3, 0x0b, 0x00, 0x3d,
	0x22, 0x96, 0x30, 0x95, 0x03, 0xba, 0xc5, 0xd6, 0x61, 0xa7, 0xda, 0xed, 0xde, 0x6e, 0xad, 0xf9,
	0xed, 0x6e, 0x5d, 0x96, 0x20, 0x96, 0x5a, 0xf2, 0x2b, 0x01, 0x11, 0x4b, 0x5d, 0xf5, 0xd7, 0xc0,
	0x19, 0x11, 0x88, 0x97, 0x13, 0x34, 0x4f, 0x05, 0x0e, 0x61, 0xc0, 0xe6, 0x54, 0x98, 0x35, 0x68,
	0xa6, 0xe4, 0x21, 0x0f, 0xf4, 0xa4, 0xee, 0xdc, 0x80, 0x46, 0x8f, 0x84, 0xb2, 0x42, 0xf9, 0x47,
	0xd0, 0x52, 0xad, 0x4b, 0xdd, 0xaf, 0x05, 0x4a, 0x1d, 0x66, 0xdc, 0x43, 0x4b, 0xa7, 0x0d, 0xea,
	0x16, 0x35, 0x89, 0xdd, 0xb2, 0x82, 0xaa, 0x6b, 0xe8, 0x6d, 0xec, 0x5c, 0xc9, 0xa9, 0x28, 0x86,
	0xe2, 0x99, 0x5b, 0x51, 0x40, 0x45, 0x03, 0xef, 0xf0, 0xcc, 0xf9, 0x06, 0x9c, 0x9a, 0xb0, 0x5c,
	0x0a, 0x48, 0x62, 0x0a, 0x53, 0x2c, 0x5c, 0xa0, 0xeb, 0xd2, 0x9c, 0x5c, 0x12, 0x2f, 0xa6, 0x23,
	0x6c, 0xd7, 0x25, 0xc9, 0x90, 0x67, 0x6e, 0xd5, 0xae, 0xcb, 0x8b, 0xe9, 0x3d, 0xcf, 0x6c, 0x0a,
	0x2d, 0x15, 0x55, 0xdb, 0xa2, 0xd0, 0x52, 0x52, 0x9b, 0xa1, 0x73, 0x92, 0x32, 0x4e, 0xdc, 0xba,
	0x3d, 0xb4, 0x9e, 0xe8, 0x3b, 0xc6, 0x89, 0xf3, 0x15, 0x70, 0xb6, 0x26, 0xab, 0xe9, 0x86, 0xa2,
	0x8f, 0xad, 0x19, 0x2b, 0xf8, 0x07, 0xe0, 0xee, 0x99, 0x96, 0x4e, 0x39, 0x56, 0x29, 0x67, 0xbb,
	0x73, 0x53, 0x79, 0x9b, 0x9a, 0xcc, 0xfc, 0x74, 0x4a, 0xd3, 0xae, 0x49, 0x4f, 0x72, 0x17, 0xd7,
	0x13, 0xd5, 0xf8, 0xc9, 0x16, 0xae, 0x66, 0x2b, 0xf1, 0x17, 0x7f, 0x54, 0x81, 0xf3, 0x71, 0x97,
	0x6c, 0x4e, 0x44, 0xc1, 0x3a, 0x11, 0x97, 0xa0, 0xe2, 0xd3, 0x48, 0x75, 0x20, 0x56, 0x4d, 0x5d,
	0xf1, 0xcb, 0x9c, 0x46, 0x32, 0x03, 0x3b, 0x4d, 0x70, 0x38, 0xa2, 0x5c, 0x75, 0x75, 0xdd, 0x3f,
	0x4c, 0x29, 0x77, 0x2e, 0x40, 0xf9, 0x1e, 0x09, 0x04, 0x09, 0xe6, 0xa6, 0x9f, 0x4b, 0x21, 0x12,
	0xc8, 0xc3, 0x2a, 0xe4, 0x2f, 0xa1, 0x3a, 0xd7, 0xea, 0x20, 0x16, 0xfd, 0x12, 0x5f, 0xaa, 0xa3,
	0xef, 0x74, 0x40, 0x73, 0x98, 0x71, 0xc8, 0x71, 0xc2, 0xb8, 0x80, 0x53, 0xbc, 0xc0, 0x53, 0xd3,
	0x92, 0x8d, 0x24, 0xe3, 0xbe, 0x92, 0x07, 0x52, 0x95, 0x5b, 0x2a, 0xc9, 0x04, 0xa3, 0x0f, 0x86,
	0x33, 0x0d, 0x29, 0x97, 0x1d, 0xa3, 0x0f, 0x1b, 0x6a, 0xb2, 0xb2, 0xa9, 0xb2, 0xa1, 0x26, 0xab,
	0x0d, 0x75, 0x0d, 0xaa, 0xf7, 0x2b, 0xba, 0xee, 0x6c, 0xd3, 0x93, 0xe1, 0x8a, 0x9a, 0xb6, 0xb6,
	0xe3, 0x31, 0x35, 0xbd, 0x98, 0xc7, 0x63, 0x2a, 0xdb, 0x7e, 0x68, 0x76, 0x48, 0x0f, 0xa2, 0x7b,
	0xb0, 0xaa, 0xf7, 0x46, 0x8f, 0x71, 0x01, 0xca, 0xc3, 0xfc, 0x7c, 0xeb, 0xe6, 0x2b, 0x99, 0xdd,
	0xb6, 0xdc, 0x91, 0x8d, 0xc7, 0xb2, 0xd9, 0xeb, 0xb6, 0x3b, 0xbe, 0x57, 0x9a, 0x3c, 0xae, 0x7d,
	0x1a, 0x0b, 0x28, 0xb6, 0xc8, 0x86, 0x22, 0x9b, 0x31, 0x8d, 0xc5, 0xa3, 0x4d, 0x7f, 0x07, 0xce,
	0xb7, 0x0c, 0x17, 0x72, 0x94, 0x41, 0xb4, 0x88, 0x54, 0xaf, 0x15, 0x7d, 0xc7, 0x36, 0x5e, 0x1f,
	0x65, 0x77, 0x8b, 0x48, 0x76, 0xe8, 0xc7, 0x29, 0x53, 0xa1, 0xb2, 0x9a, 0x2a, 0xeb, 0x6c, 0x27,
	0x6b, 0x20, 0x64, 0xde, 0xde, 0xa1, 0xe4, 0x32, 0x9d, 0xec, 0x1d, 0x4a, 0xae, 0xd7, 0xfe, 0x14,
	0xb4, 0x74, 0x9d, 0xfd, 0x29, 0xda, 0x59, 0x7e, 0x66, 0x4c, 0xba, 0x14, 0x1e, 0xc3, 0x80, 0x0a,
	0xf7, 0x54, 0x2f, 0x71, 0xc4, 0x58, 0xd8, 0x63, 0x78, 0xdc, 0xd3, 0x1e, 0x35, 0x0a, 0xd0, 0x14,
	0x6f, 0xa0, 0x33, 0xbd, 0xd9, 0xa9, 0x54, 0x73, 0xaa, 0x03, 0x9a, 0x7d, 0x92, 0xcc, 0xa7, 0xa9,
	0xc5, 0x9d, 0xeb, 0x16, 0x8b, 0xb5, 0x9e, 0x93, 0x5d, 0xf0, 0x7c, 0xc8, 0x31, 0xc4, 0xb3, 0xb9,
	0x22, 0xc7, 0xfa, 0xe8, 0x4a, 0xfe, 0xb9, 0xe2, 0x9d, 0x84, 0xe3, 0x87, 0xd9, 0x5c, 0xe2, 0x63,
	0xb9, 0x91, 0x32, 0xe7, 0x1a, 0x54, 0x65, 0xc3, 0xb1, 0x04, 0x12, 0x16, 0x62, 0xf7, 0x13, 0xdd,
	0x2a, 0xc9, 0x64, 0xf5, 0x3e, 0xf1, 0x58, 0x88, 0x9d, 0x2f, 0xc1, 0x89, 0xda, 0x46, 0x4e, 0x23,
	0x18, 0x53, 0x81, 0xf9, 0x02, 0x4d, 0x5d, 0x57, 0x7b, 0x86, 0xdc, 0x45, 0x9f, 0x46, 0x7d, 0x23,
	0xcb, 0x13, 0xf7, 0x36, 0x16, 0xc6, 0x98, 0x2f, 0x14, 0x53, 0x9e, 0xc4, 0x42, 0x1b, 0xf2, 0x25,
	0xa8, 0x78, 0x71, 0x6a, 0x82, 0x2f, 0x74, 0x90, 0xc4, 0xa9, 0x0e, 0x4a, 0x1f, 0x66, 0x14, 0x92,
	0x35, 0x70, 0x69, 0x7c, 0x98, 0x51, 0x2f, 0x67, 0x2e, 0x41, 0x65, 0x7d, 0xdd, 0xba, 0x9f, 0xaa,
	0x85, 0x2f, 0xe7, 0x77, 0xad, 0x65, 0x98, 0x1c, 0x27, 0xb2, 0xf1, 0xdd, 0x2b, 0xdb, 0x30, 0x7d,
	0x9c, 0x0c, 0x33, 0x6e, 0x51, 0x01, 0x09, 0x15, 0x75, 0x6d, 0x53, 0x3d, 0x12, 0x6e, 0x53, 0xda,
	0xfe, 0x32, 0xf7, 0xe5, 0xce, 0xd5, 0x31, 0x60, 0x99, 0xf3, 0x39, 0x38, 0xde, 0xa2, 0x50, 0xe8,
	0xb6, 0x14, 0x56, 0xb7, 0x30, 0x14, 0x5a, 0x0e, 0x67, 0x2a, 0xd3, 0x0e, 0xf7, 0xca, 0x76, 0x38,
	0x5d, 0xde, 0x8e, 0x21, 0x9a, 0x12, 0x35, 0xde, 0xb6, 0x71, 0x5d, 0xe7, 0x0e, 0x6e, 0x6a, 0xd5,
	0xf8, 0xeb, 0x9d, 0x2b, 0x60, 0xc0, 0xb4, 0xdd, 0x7e, 0x0b, 0xce, 0x76, 0x8a, 0xd6, 0xfc, 0x8d,
	0xe2, 0x4f, 0xb6, 0x2a, 0xcf, 0xbf, 0xef, 0xe3, 0x14, 0xf3, 0x05, 0x86, 0x63, 0xc6, 0xe1, 0xa2,
	0x0b, 0x03, 0xfa, 0xc4, 0xdd, 0xcf, 0x94, 0x9d, 0x36, 0xb9, 0x0e, 0xbd, 0x61, 0xfc, 0xb7, 0x6e,
	0x8f, 0x3e, 0xf1, 0xf6, 0x08, 0x9c, 0xef, 0xde, 0xea, 0x70, 0x10, 0xa7, 0xc2, 0xf9, 0x11, 0x94,
	0x7b, 0xc4, 0xbc, 0x06, 0x0a, 0xea, 0x35, 0xf0, 0xf2, 0x5f, 0x5e, 0x03, 0x7e, 0x29, 0x20, 0xea,
	0x9f, 0xf6, 0x9f, 0x07, 0x9b, 0x37, 0x8c, 0x17, 0xfe, 0xef, 0x37, 0xcc, 0x0d, 0x68, 0x3c, 0x32,
	0x81, 0xa6, 0xaa, 0x85, 0x39, 0x9e, 0xa5, 0xc6, 0xf5, 0x6b, 0x42, 0xaa, 0x3e, 0x8d, 0x7c, 0x3c,
	0x4b, 0x95, 0xc7, 0xe7, 0x71, 0x63, 0xff, 0xdc, 0x84, 0xda, 0xa0, 0xbe, 0x3e, 0x02, 0x2a, 0xae,
	0x1f, 0x63, 0x55, 0xd3, 0xfe, 0x8a, 0xb9, 0x01, 0x8d, 0x9f, 0xb6, 0x21, 0x7d, 0x0b, 0xd4, 0x9e,
	0xfa, 0x16, 0x25, 0x8f, 0x32, 0x5d, 0xa0, 0x69, 0x1c, 0x6e, 0xb8, 0x92, 0x39, 0xca, 0x5a, 0xcf,
	0xc9, 0x2b, 0x00, 0x64, 0x39, 0xe8, 0x89, 0x71, 0x91, 0x9a, 0x3b, 0xa0, 0xc2, 0x69, 0x74, 0xa7,
	0x84, 0x3c, 0x8c, 0x39, 0x67, 0x3c, 0xcd, 0xfd, 0x9f, 0xd3, 0xe8, 0x41, 0x09, 0xf6, 0x36, 0xe4,
	0x0b, 0xb6, 0xde, 0x06, 0x2f, 0xfc, 0x4f, 0xdb, 0x90, 0xe7, 0xf9, 0x25, 0x12, 0xaa, 0x7f, 0x9e,
	0x8e, 0xd4, 0xc3, 0xf9, 0xfb, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb8, 0x2b, 0x8f, 0x61, 0x49,
	0x0b, 0x00, 0x00,
}
